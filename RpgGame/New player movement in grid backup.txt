#include "Player.h"
#include "Menus.h"
#include "Functions.h"
#include "Level.h"

#include <sstream>

Player::~Player()
{
	delete _playerTexture;
	delete _playerSourceRect;
	delete relativePos;
}
void Player::LoadContent()
{
	_playerTexture = new Texture2D();
	_playerTexture->Load("Textures/CharSPriteSheet.Png", false);
	_playerPosition = new Vector2(256, 256);
	_playerSourceRect = new Rect(0.0f, 0.0f, 32, 48);
}

void Player::Update(int elapsedTime)
{
	//Movement control in grid
	if (keyboardState->IsKeyDown(Input::Keys::W) && (!Spressed) && (!Wpressed) && (!Apressed) && (!Dpressed))
	{
		_originalPos = relativePos->Y;
		Wpressed = true;

	}
	if (Wpressed)
	{
		_isMoving = true;
		_playerDirection = 2;
		if ((relativePos->Y > _originalPos - 32))
		{
			//if ((relativePos->Y - (_originalPos - 32) == 0 || (relativePos->Y - (_originalPos - 32) == 32)))
			//{
			//	_playerSourceRect = new Rect(96, 144, 32, 48);
			//}
			mustBeLocation = _originalPos - 32;
			relativePos->Y -= 0.1 * elapsedTime;
		}
		else
		{
			if (keyboardState->IsKeyUp(Input::Keys::W))
			{
				Wpressed = false;
				_isMoving = false;

			}
			else
			{
				Wpressed = false;
				_isMoving = false;
			}
			relativePos->Y = mustBeLocation;
		}
	}
	if (keyboardState->IsKeyDown(Input::Keys::S) && (!Spressed) && (!Wpressed) && (!Apressed) && (!Dpressed))
	{
		_originalPos = relativePos->Y;
		Spressed = true;
	}
	if (Spressed)
	{
		_isMoving = true;
		_playerDirection = 0;
		if ((relativePos->Y < _originalPos + 32))
		{
			relativePos->Y += 0.1 * elapsedTime;
			mustBeLocation = _originalPos + 32;
		}
		else
		{
			relativePos->Y = mustBeLocation;

			Spressed = false;
			_isMoving = false;
		}
	}
	if (keyboardState->IsKeyDown(Input::Keys::A) && (!Spressed) && (!Wpressed) && (!Apressed) && (!Dpressed))
	{
		_originalPos = relativePos->X;
		Apressed = true;
	}
	if (Apressed)
	{
		_isMoving = true;
		_playerDirection = 1;
		if ((relativePos->X > _originalPos - 32))
		{
			relativePos->X -= 0.1 * elapsedTime;
			mustBeLocation = _originalPos - 32;
		}
		else
		{
			relativePos->X = mustBeLocation;
			Apressed = false;
			_isMoving = false;
		}
	}
	if (keyboardState->IsKeyDown(Input::Keys::D) && (!Spressed) && (!Wpressed) && (!Apressed) && (!Dpressed))
	{
		_originalPos = relativePos->X;
		Dpressed = true;
	}
	if (Dpressed)
	{
		_isMoving = true;
		_playerDirection = 3;
		if ((relativePos->X < _originalPos + 32))
		{
			relativePos->X += 0.1 * elapsedTime;
			mustBeLocation = _originalPos + 32;
		}
		else
		{
			relativePos->X = mustBeLocation;
			Dpressed = false;
			_isMoving = false;
		}
	}
	//end of movement control in grid

	//Direction Control
	if (_isMoving)
	{
		if (_playerDirection == 0)//0 = down
		{
			if ((_frameCount >= 0) && _frameCount < 15)
			{
				_playerSourceRect = new Rect(0, 0.00f, 32, 48);
			}
			if (_frameCount >= 15 && _frameCount < 30)
			{
				_playerSourceRect = new Rect(32, 0.00f, 32, 48);
			}
			if (_frameCount >= 30 && _frameCount < 45)
			{
				_playerSourceRect = new Rect(64, 0.00f, 32, 48);
			}
			if (_frameCount >= 45 && _frameCount  < 60)
			{
				_playerSourceRect = new Rect(96, 0.00f, 32, 48);
			}
		}
		if (_playerDirection == 1)//1 = left
		{
			if ((_frameCount >= 0) && _frameCount < 15)
			{
				_playerSourceRect = new Rect(0.00f, 48, 32, 48);
			}
			if (_frameCount >= 15 && _frameCount < 30)
			{
				_playerSourceRect = new Rect(32, 48, 32, 48);
			}
			if (_frameCount >= 30 && _frameCount < 45)
			{
				_playerSourceRect = new Rect(64, 48, 32, 48);
			}
			if (_frameCount >= 45 && _frameCount  < 60)
			{
				_playerSourceRect = new Rect(96, 48, 32, 48);
			}
		}

		if (_playerDirection == 2)//2 = up
		{
			if ((_frameCount >= 0) && _frameCount < 15)
			{
				_playerSourceRect = new Rect(0.00f, 144, 32, 48);
			}
			if (_frameCount >= 15 && _frameCount < 30)
			{
				_playerSourceRect = new Rect(32, 144, 32, 48);
			}
			if (_frameCount >= 30 && _frameCount < 45)
			{
				_playerSourceRect = new Rect(64, 144, 32, 48);
			}
			if (_frameCount >= 45 && _frameCount  < 60)
			{
				_playerSourceRect = new Rect(96, 144, 32, 48);
			}
		}
		if (_playerDirection == 3)//3 = right
		{
			if ((_frameCount >= 0) && _frameCount < 15)
			{
				_playerSourceRect = new Rect(0.00f, 96, 32, 48);
			}
			if (_frameCount >= 15 && _frameCount < 30)
			{
				_playerSourceRect = new Rect(32, 96, 32, 48);
			}
			if (_frameCount >= 30 && _frameCount < 45)
			{
				_playerSourceRect = new Rect(64, 96, 32, 48);
			}
			if (_frameCount >= 45 && _frameCount  < 60)
			{
				_playerSourceRect = new Rect(96, 96, 32, 48);
			}
		}
	}


	if (!_isMoving)
	{
		if (_playerDirection == 0 && (keyboardState->IsKeyUp(Input::Keys::S)))//0 = down
		{
			_playerSourceRect = new Rect(0, 0.00f, 32, 48);
		}
		if (_playerDirection == 1 && (keyboardState->IsKeyUp(Input::Keys::A)))//1 = Left
		{
			_playerSourceRect = new Rect(0.00f, 48, 32, 48);
		}
		if (_playerDirection == 2 && (keyboardState->IsKeyUp(Input::Keys::W)))//2 = Up
		{
			_playerSourceRect = new Rect(0.00f, 144, 32, 48);
		}
		if (_playerDirection == 3 && (keyboardState->IsKeyUp(Input::Keys::D)))//3 = Right
		{
			_playerSourceRect = new Rect(0.00f, 96, 32, 48);
		}
	}
	_frameCount++;
	if (_frameCount > 60)
	{
		_frameCount = 0;
	}
	Functions* usedFunction = new Functions();
	//player map control
}

void Player::Draw(int elapsedTime)
{
	std::stringstream playerPosDraw;
	playerPosDraw << "Player X: " << _playerPosition->X << "Player Y: " << _playerPosition->Y;
	Vector2* posDrawPosition = new Vector2(0,32);
	SpriteBatch::DrawString(playerPosDraw.str().c_str(), posDrawPosition, Color::White);
	SpriteBatch::Draw(_playerTexture, _playerPosition, _playerSourceRect);// Draws Player
}

/*int Player::X()
{
	return _playerDirection->X;
}

int Player::SetX(int newX)
{
	_playerPosition->X = newX;
}

/*int Player::Y()
{
	return _playerPosition->Y;
}

int Player::SetY(int newY)
{
	_playerPosition->Y = newY;
}

/*int Player::GetWidth()
{
	return _playerSourceRect->Width;
}

int Player:: GetHeight()
{
	return _playerSourceRect->Height;
	*/